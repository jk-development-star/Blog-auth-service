service: authorizer-test

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  stackName: Auth-Test-For-API-Gateway
  role: arn:aws:iam::050752626146:role/ExecutionRoleForS3AndLambda
  memorySize: 1024
  timeout: 29
  versionFunctions: false
  endpointType: regional
  tracing:
    lambda: true
  stackTags:
    environment: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
functions:
  UserLogin:
    handler: handler.userLogin
    description: Login function
    name: login
    environment:
      XRAY_ENABLED: true
      STAGE: dev
      DATABASE_URL: mongodb+srv://vishwakarma137:nQc7HjtfDSaB19Db@blog-app.a414a.mongodb.net/?retryWrites=true&w=majority&appName=Blog-App
      DB_NAME: auths
      JWT_KEY: secret
    events:
      - http:
          path: /login
          method: post
          cors: true
  authorizeJwtToken:
    handler: handler.authorizer
  registerUser:
    handler: handler.userRegister
    description: Register function
    name: user-register
    environment:
      XRAY_ENABLED: true
      STAGE: dev
      DATABASE_URL: mongodb+srv://vishwakarma137:nQc7HjtfDSaB19Db@blog-app.a414a.mongodb.net/?retryWrites=true&w=majority&appName=Blog-App
      DB_NAME: blog-users
      JWT_KEY: secret
    events:
      - http:
          path: /register
          method: post
          cors: true
          authorizer:
            name: authorizeJwtToken
  getUserById:
    handler: handler.getUserById
    description: Get user function
    name: get-user-details
    environment:
      XRAY_ENABLED: true
      STAGE: dev
      DATABASE_URL: mongodb+srv://vishwakarma137:nQc7HjtfDSaB19Db@blog-app.a414a.mongodb.net/?retryWrites=true&w=majority&appName=Blog-App
      DB_NAME: blog-users
      JWT_KEY: secret
    events:
      - http:
          path: /get-user-details/{id}
          method: get
          cors: true
          authorizer:
            name: authorizeJwtToken
resources:
  Outputs:
    AuthorizationJwtTokenArn:
      Value:
        Fn::GetAtt: [AuthorizeJwtTokenLambdaFunction, Arn]
      Export:
        Name: AuthorizationJwtTokenArn
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDEFAULT5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
package:
  exclude:
    - coverage/**
    - test/**
    - package-lock.json
    - .npm/**
    - .idea/**
